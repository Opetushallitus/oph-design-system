{"version":3,"sources":["../src/OphSelect.tsx"],"names":[],"mappings":";;;;;AAEA,SAAS,QAAQ,gBAAkC;AAmC/C,SACE,KADF;AAPG,IAAM,YAAY,CAAmB;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAA8B;AAC5B,SACE,qBAAC,UAAO,cAAa,IAAG,cAAY,MAAE,GAAG,OAAO,OAAO,MACrD;AAAA,wBAAC,YAAS,IAAI,EAAE,SAAS,YAAY,UAAU,OAAO,GAAG,OAAM,IAC5D,uBACH;AAAA,IACC,QAAQ,IAAI,CAAC,EAAE,OAAO,MAAM,MAAM;AACjC,aACE,oBAAC,YAAS,OACP,mBAD0B,KAE7B;AAAA,IAEJ,CAAC;AAAA,KACH;AAEJ;AAEO,IAAM,qBAAqB,CAAmB;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAAuC;AACrC,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa,CAAC,EAAE,QAAQ,MAAM,oBAAC,aAAW,GAAG,OAAO,SAAkB;AAAA;AAAA,EACxE;AAEJ","sourcesContent":["'use client';\n\nimport { Select, MenuItem, type SelectProps } from '@mui/material';\nimport {\n  OphFormFieldWrapper,\n  type OphFieldWrapperCommonProps,\n} from './OphFormFieldWrapper';\n\nexport type OphSelectValue<T> = SelectProps<T>['value'];\n\nexport interface OphSelectOption<T> {\n  label: string;\n  value: OphSelectValue<T>;\n}\n\nexport interface OphSelectProps<T>\n  extends Omit<SelectProps<T>, 'children' | 'label' | 'variant'> {\n  options: Array<OphSelectOption<T>>;\n  clearable?: boolean;\n  placeholder?: string;\n}\n\nexport interface OphSelectFormFieldProps<T>\n  extends OphFieldWrapperCommonProps,\n    OphSelectProps<T> {\n  options: Array<OphSelectOption<T>>;\n  clearable?: boolean;\n  placeholder?: string;\n}\n\nexport const OphSelect = <T extends string>({\n  placeholder,\n  clearable,\n  options,\n  ...props\n}: OphSelectProps<T | ''>) => {\n  return (\n    <Select defaultValue=\"\" displayEmpty {...props} label={null}>\n      <MenuItem sx={{ display: clearable ? 'block' : 'none' }} value=\"\">\n        {placeholder}\n      </MenuItem>\n      {options.map(({ value, label }) => {\n        return (\n          <MenuItem value={value} key={value}>\n            {label}\n          </MenuItem>\n        );\n      })}\n    </Select>\n  );\n};\n\nexport const OphSelectFormField = <T extends string>({\n  required,\n  label,\n  helperText,\n  errorMessage,\n  ...props\n}: OphSelectFormFieldProps<T | ''>) => {\n  return (\n    <OphFormFieldWrapper\n      required={required}\n      label={label}\n      helperText={helperText}\n      errorMessage={errorMessage}\n      renderInput={({ labelId }) => <OphSelect {...props} labelId={labelId} />}\n    />\n  );\n};\n"]}