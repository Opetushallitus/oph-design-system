{"version":3,"sources":["../src/OphButton.tsx","../src/OphCheckbox.tsx","../src/OphSelect.tsx","../src/OphTypography.tsx","../node_modules/@mui/icons-material/esm/OpenInNew.js","../src/OphLink.tsx"],"sourcesContent":["import { Button, type ButtonProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { forwardRef } from 'react';\n\nexport type OphButtonProps = Omit<ButtonProps, 'endIcon'>;\n\nconst StyledButton = styled(Button)(({ theme, children }) => {\n  return children\n    ? {}\n    : {\n        //Jos ei lapsia, pienennet채채n marginaaleja, jotta pelkk채 ikoni n채kyy hyvin\n        '&.MuiButton-root': {\n          padding: theme.spacing(0.5),\n          margin: 0,\n          minWidth: 0,\n          flexShrink: 0,\n        },\n        '& .MuiButton-startIcon': {\n          margin: 0,\n        },\n      };\n});\n\nexport const OphButton = forwardRef<HTMLButtonElement, ButtonProps>(\n  function renderButton(props, ref) {\n    return <StyledButton {...props} ref={ref} />;\n  },\n);\n","import {\n  Checkbox,\n  FormControlLabel,\n  type CheckboxProps,\n  type FormControlLabelProps,\n} from '@mui/material';\nimport React, { forwardRef } from 'react';\n\nexport type OphCheckboxProps = Omit<\n  CheckboxProps,\n  | 'centerRipple'\n  | 'checkedIcon'\n  | 'disableRipple'\n  | 'icon'\n  | 'indeterminateIcon'\n  | 'size'\n  | 'LinkComponent'\n> & {\n  formControlLabelProps?: Omit<FormControlLabelProps, 'label' | 'control'>;\n  label?: React.ReactNode;\n  error?: boolean;\n};\n\nexport const OphCheckbox = forwardRef<HTMLButtonElement, OphCheckboxProps>(\n  function renderCheckbox(\n    { label, error, formControlLabelProps, ...props },\n    ref,\n  ) {\n    const checkboxProps = {\n      ...props,\n      color: error ? 'error' : props.color,\n      ref,\n    };\n    return label ? (\n      <FormControlLabel\n        {...formControlLabelProps}\n        label={label}\n        control={<Checkbox {...checkboxProps} />}\n      />\n    ) : (\n      <Checkbox {...checkboxProps} />\n    );\n  },\n);\n","'use client';\nimport { Select, MenuItem, type SelectProps } from '@mui/material';\n\nexport type OphSelectValue<T> = SelectProps<T>['value'];\n\nexport interface OphSelectOption<T> {\n  label: string;\n  value: OphSelectValue<T>;\n}\n\nexport interface OphSelectProps<T>\n  extends Omit<SelectProps<T>, 'children' | 'label' | 'variant'> {\n  options: Array<OphSelectOption<T>>;\n  clearable?: boolean;\n}\n\nexport const OphSelect = <T extends string>({\n  placeholder,\n  clearable,\n  options,\n  ...props\n}: OphSelectProps<T | ''>) => {\n  return (\n    <Select defaultValue=\"\" displayEmpty {...props} label={null}>\n      <MenuItem sx={{ display: clearable ? 'block' : 'none' }} value=\"\">\n        {placeholder}\n      </MenuItem>\n      {options.map(({ value, label }) => {\n        return (\n          <MenuItem value={value} key={value}>\n            {label}\n          </MenuItem>\n        );\n      })}\n    </Select>\n  );\n};\n","import { Typography, type Theme, type TypographyProps } from '@mui/material';\nimport { type SystemProps } from '@mui/system';\nimport { forwardRef } from 'react';\n\ntype OmittedSystemPropNames = keyof Omit<SystemProps<Theme>, 'color'>;\n\nexport type OphTypographyProps = Omit<\n  TypographyProps & {\n    variant?:\n      | 'button'\n      | 'body1'\n      | 'body2'\n      | 'h1'\n      | 'h2'\n      | 'h3'\n      | 'h4'\n      | 'h5'\n      | 'label';\n  },\n  OmittedSystemPropNames | 'paragraph' | 'variantMapping'\n>;\n\nexport const OphTypography = forwardRef<HTMLElement, OphTypographyProps>(\n  function renderTypography(props, ref) {\n    return <Typography {...props} ref={ref} />;\n  },\n);\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'OpenInNew');","import OpenInNew from '@mui/icons-material/OpenInNew';\nimport { Link, type LinkOwnProps, type Theme } from '@mui/material';\nimport { EXTERNAL_LINK_REGEX } from './common';\nimport { type SystemProps } from '@mui/system';\nimport { forwardRef } from 'react';\nimport type {\n  OverridableComponent,\n  OverrideProps,\n} from '@mui/material/OverridableComponent';\n\ntype OmittedPropNames =\n  | keyof SystemProps<Theme>\n  | 'paragraph'\n  | 'TypographyClasses'\n  | 'variantMapping'\n  | 'align'\n  | 'gutterBottom'\n  | 'underline';\n\ninterface OphAdditionalLinkProps {\n  /** Icon visibility override. If not given, icon visibility is deduced from href (relative links without icon) */\n  iconVisible?: boolean;\n}\n\ninterface OphLinkTypeMap<\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'a',\n> {\n  props: AdditionalProps & Omit<LinkOwnProps, OmittedPropNames>;\n  defaultComponent: RootComponent;\n}\n\ntype MuiOphLinkProps<\n  RootComponent extends React.ElementType = OphLinkTypeMap['defaultComponent'],\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  AdditionalProps = {},\n> = OverrideProps<\n  OphLinkTypeMap<AdditionalProps, RootComponent>,\n  RootComponent\n> & {\n  component?: React.ElementType;\n};\n\nexport type OphLinkProps<\n  C extends React.ElementType = React.ElementType,\n  D extends React.ElementType = OphLinkTypeMap['defaultComponent'],\n> = {\n  component?: C;\n} & Omit<MuiOphLinkProps<D, OphAdditionalLinkProps>, 'component'>;\n\n// https://github.com/mui/material-ui/issues/32420\nexport const OphLink: OverridableComponent<OphLinkTypeMap<OphLinkProps>> =\n  forwardRef(function renderLink<C extends React.ElementType>(\n    { iconVisible, children, href, ...rest }: OphLinkProps<C>,\n    ref: React.Ref<HTMLAnchorElement> | null,\n  ) {\n    const realIconVisibility =\n      iconVisible ?? (href && EXTERNAL_LINK_REGEX.test(href));\n    return (\n      <Link href={href} {...rest} ref={ref}>\n        {children}\n        {realIconVisibility && <OpenInNew className=\"OphLink-OpenInNewIcon\" />}\n      </Link>\n    );\n  }) as OverridableComponent<OphLinkTypeMap<OphLinkProps>>;\n"],"mappings":";;;;;;;;;AAAA,SAAS,cAAgC;AACzC,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAuBhB;AAnBX,IAAM,eAAe,OAAO,MAAM,EAAE,CAAC,EAAE,OAAO,SAAS,MAAM;AAC3D,SAAO,WACH,CAAC,IACD;AAAA;AAAA,IAEE,oBAAoB;AAAA,MAClB,SAAS,MAAM,QAAQ,GAAG;AAAA,MAC1B,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,YAAY;AAAA,IACd;AAAA,IACA,0BAA0B;AAAA,MACxB,QAAQ;AAAA,IACV;AAAA,EACF;AACN,CAAC;AAEM,IAAM,YAAY;AAAA,EACvB,SAAS,aAAa,OAAO,KAAK;AAChC,WAAO,oBAAC,gBAAc,GAAG,OAAO,KAAU;AAAA,EAC5C;AACF;;;AC3BA;AAAA,EACE;AAAA,EACA;AAAA,OAGK;AACP,SAAgB,cAAAA,mBAAkB;AA+BjB,gBAAAC,YAAA;AAdV,IAAM,cAAcD;AAAA,EACzB,SAAS,eACP,EAAE,OAAO,OAAO,uBAAuB,GAAG,MAAM,GAChD,KACA;AACA,UAAM,gBAAgB;AAAA,MACpB,GAAG;AAAA,MACH,OAAO,QAAQ,UAAU,MAAM;AAAA,MAC/B;AAAA,IACF;AACA,WAAO,QACL,gBAAAC;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA,SAAS,gBAAAA,KAAC,YAAU,GAAG,eAAe;AAAA;AAAA,IACxC,IAEA,gBAAAA,KAAC,YAAU,GAAG,eAAe;AAAA,EAEjC;AACF;;;AC1CA,SAAS,QAAQ,gBAAkC;AAsB/C,SACE,OAAAC,MADF;AAPG,IAAM,YAAY,CAAmB;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAA8B;AAC5B,SACE,qBAAC,UAAO,cAAa,IAAG,cAAY,MAAE,GAAG,OAAO,OAAO,MACrD;AAAA,oBAAAA,KAAC,YAAS,IAAI,EAAE,SAAS,YAAY,UAAU,OAAO,GAAG,OAAM,IAC5D,uBACH;AAAA,IACC,QAAQ,IAAI,CAAC,EAAE,OAAO,MAAM,MAAM;AACjC,aACE,gBAAAA,KAAC,YAAS,OACP,mBAD0B,KAE7B;AAAA,IAEJ,CAAC;AAAA,KACH;AAEJ;;;ACpCA,SAAS,kBAAoD;AAE7D,SAAS,cAAAC,mBAAkB;AAsBhB,gBAAAC,YAAA;AAFJ,IAAM,gBAAgBD;AAAA,EAC3B,SAAS,iBAAiB,OAAO,KAAK;AACpC,WAAO,gBAAAC,KAAC,cAAY,GAAG,OAAO,KAAU;AAAA,EAC1C;AACF;;;ACvBA,SAAS,OAAO,YAAY;AAC5B,IAAO,oBAAQ,cAA4B,qBAAK,QAAQ;AAAA,EACtD,GAAG;AACL,CAAC,GAAG,WAAW;;;ACLf,SAAS,YAA2C;AAGpD,SAAS,cAAAC,mBAAkB;AAwDrB,SAEyB,OAAAC,MAFzB,QAAAC,aAAA;AARC,IAAM,UACXF,YAAW,SAAS,WAClB,EAAE,aAAa,UAAU,MAAM,GAAG,KAAK,GACvC,KACA;AACA,QAAM,qBACJ,gBAAgB,QAAQ,oBAAoB,KAAK,IAAI;AACvD,SACE,gBAAAE,MAAC,QAAK,MAAa,GAAG,MAAM,KACzB;AAAA;AAAA,IACA,sBAAsB,gBAAAD,KAAC,qBAAU,WAAU,yBAAwB;AAAA,KACtE;AAEJ,CAAC;","names":["forwardRef","jsx","jsx","forwardRef","jsx","forwardRef","jsx","jsxs"]}